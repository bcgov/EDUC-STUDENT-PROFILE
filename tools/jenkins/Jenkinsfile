pipeline{
  agent any
  environment{
    DEBUG_OUTPUT = 'false'

    extJSHelper = '';
    NAMESPACE='c2mvws'
    COMMON_NAMESPACE='mvubjx'
    STAGING_ENV = 'Dev'
    TOOLS = 'c2mvws-tools'
    DEV = 'c2mvws-dev'
    TEST = 'c2mvws-test'
    PROD = 'c2mvws-prod'
    REPO_NAME = 'educ-student-profile'
    TESTS_REPO_NAME = 'educ-pen-reg-automation'
    OWNER = 'bcgov'
    JOB_NAME = 'master'
    TAG = 'latest'
    TARGET_ENV = 'dev'
    TARGET_ENVIRONMENT = "${NAMESPACE}-${TARGET_ENV}"

    APP_NAME = 'student-profile'
    APP_DOMAIN = 'pathfinder.gov.bc.ca'

    SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
    SOURCE_REPO_REF = 'master'
    SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

    TOOLS_HOST_ROUTE = "tools.getmypen.gov.bc.ca"
    DEV_HOST_ROUTE = "dev.getmypen.gov.bc.ca"
    TEST_HOST_ROUTE = "test.getmypen.gov.bc.ca"
    PROD_HOST_ROUTE = "getmypen.gov.bc.ca"
    MIN_REPLICAS_FE = "1"
    MAX_REPLICAS_FE = "1"
    MIN_CPU_FE = "25m"
    MAX_CPU_FE = "50m"
    MIN_MEM_FE = "50Mi"
    MAX_MEM_FE = "100Mi"
    MIN_REPLICAS_BE = "1"
    MAX_REPLICAS_BE = "1"
    MIN_CPU_BE = "50m"
    MAX_CPU_BE = "100m"
    MIN_MEM_BE = "200Mi"
    MAX_MEM_BE = "250Mi"
    DC_URL_FRONTEND = "https://raw.githubusercontent.com/${OWNER}/${REPO_NAME}/master/tools/openshift/frontend-static.dc.yaml"
    DC_URL_BACKEND = "https://raw.githubusercontent.com/${OWNER}/${REPO_NAME}/master/tools/openshift/backend.dc.yaml"
    CA_CERT = "";
    CERT = "";
    PRIV_KEY = "";
  }

  stages {
    stage('Initialize') {
      steps {
        script {
          if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
          sh "wget -O - https://raw.githubusercontent.com/bcgov/EDUC-INFRA-COMMON/master/openshift/common-deployment/deployHelpers.js > deployHelpers.js"
          extJSHelper = evaluate readFile('deployHelpers.js')
        }
      }
    }
    stage('Build'){
      steps{
        script {
          openshift.withCluster(){
            openshift.withProject(TOOLS){
              parallel(
                      Backend: {
                        try{
                          echo "Building backend..."
                          def bcBackend = openshift.process('-f', 'tools/openshift/backend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
                          openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')

                          openshift.tag("${REPO_NAME}-backend:latest", "${REPO_NAME}-backend:${JOB_NAME}")
                        } catch(e) {
                          echo "Backend build failed"
                          throw e
                        }
                      },
                      Frontend: {
                        try {
                          echo "Building frontend..."
                          def bcFrontend = openshift.process('-f', 'tools/openshift/frontend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")

                          openshift.apply(bcFrontend).narrow('bc').startBuild('-w').logs('-f')
                          openshift.tag("${REPO_NAME}-frontend:latest", "${REPO_NAME}-frontend:${JOB_NAME}")

                          def bcFrontendStatic = openshift.process('-f', 'tools/openshift/frontend-static.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "NAMESPACE=${TOOLS}")
                          openshift.apply(bcFrontendStatic).narrow('bc').startBuild('-w').logs('-f')
                          openshift.tag("${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:${JOB_NAME}")
                        } catch(e) {
                          echo "Frontend build failed"
                          throw e
                        }
                      })
            }
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs...'
          script {
            openshift.withCluster() {
              openshift.withProject(TOOLS) {
                if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                  echo "DEBUG - Using project: ${openshift.project()}"
                } else {
                  def bcBackend = openshift.selector('bc', "${REPO_NAME}-backend-${JOB_NAME}")
                  def bcFrontend = openshift.selector('bc', "${REPO_NAME}-frontend-${JOB_NAME}")
                  def bcFrontendStatic = openshift.selector('bc', "${REPO_NAME}-frontend-static-${JOB_NAME}")

                  if(bcBackend.exists()){
                    echo "Removing BuildConfig ${REPO_NAME}-backend-${JOB_NAME}..."
                    bcBackend.delete()
                  }
                  if(bcFrontend.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend-${JOB_NAME}..."
                    bcFrontend.delete()
                  }
                  if(bcFrontendStatic.exists()) {
                    echo "Removing BuildConfig ${REPO_NAME}-frontend-static-${JOB_NAME}..."
                    bcFrontendStatic.delete()
                  }
                }
              }
            }
          }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
	stage('Promote and configure DEV') {
      steps{
        script{
            CA_CERT = sh( script: "oc -n ${DEV} -o json get secret dev-certs-ssl | sed -n 's/.*\"ca-certificate-l1k\": \"\\(.*\\)\",/\\1/p' | base64 --decode", returnStdout: true);
            CERT = sh( script: "oc -n ${DEV} -o json get secret dev-certs-ssl | sed -n 's/.*\"certificate\": \"\\(.*\\)\",/\\1/p' | base64 --decode", returnStdout: true);
            PRIV_KEY = sh( script: "oc -n ${DEV} -o json get secret dev-certs-ssl | sed -n 's/.*\"private-key\": \"\\(.*\\)\"/\\1/p' | base64 --decode", returnStdout: true);

            extJSHelper.performUIDeploy(DEV_HOST_ROUTE, STAGING_ENV, TARGET_ENVIRONMENT, REPO_NAME, APP_NAME, JOB_NAME, TAG, TOOLS, TARGET_ENVIRONMENT, APP_DOMAIN, DC_URL_FRONTEND, DC_URL_BACKEND, MIN_REPLICAS_FE, MAX_REPLICAS_FE, MIN_CPU_FE, MAX_CPU_FE, MIN_MEM_FE, MAX_MEM_FE, MIN_REPLICAS_BE, MAX_REPLICAS_BE, MIN_CPU_BE, MAX_CPU_BE, MIN_MEM_BE, MAX_MEM_BE, TARGET_ENV, NAMESPACE, COMMON_NAMESPACE, CA_CERT, CERT, PRIV_KEY)
        }
      }
      post{
        success{
          echo 'Deployment to Dev was successful'
        }
        failure{
          echo 'Deployment to Dev failed'
        }
      }
    }
    stage('e2e tests'){
      steps {
        script {
          withCredentials([string(credentialsId: 'c2mvws-tools-github-actions-token', variable: 'TOKEN')]) {
            extJSHelper.triggerWorkflow(TOKEN, 'smoke-test-student-profile-dev-environment')
            extJSHelper.waitForWorkflowRunComplete(TOKEN)
          }
        }
      }
    }
  }
}
