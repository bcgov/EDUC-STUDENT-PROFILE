import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.util.regex.Pattern

def BE_COV_STASH = 'backend-coverage'
def FE_COV_STASH = 'frontend-coverage'

pipeline{
    agent any
    tools{
        nodejs "nodejs"
    }

    environment{
        DEBUG_OUTPUT = 'false'

        TOOLS = 'c2mvws-tools'
        DEV = 'c2mvws-dev'
        TEST = 'c2mvws-test'
        PROD = 'c2mvws-prod'

        REPO_NAME = 'educ-student-profile'
        OWNER = 'bcgov'
        JOB_NAME = 'master'
        
        APP_NAME = 'student-profile'
        APP_DOMAIN = 'pathfinder.gov.bc.ca'

        SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
        SOURCE_REPO_REF = 'master'
        SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

        TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
        DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
        TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
        PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"

        SONARQUBE_URL_INT = ' https://sonarqube-c2mvws-tools.pathfinder.gov.bc.ca'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                        // Force OpenShift Plugin directives to be verbose
                        openshift.logLevel(1)

                        // Print all environment variables
                        echo 'DEBUG - All pipeline environment variables:'
                        echo sh(returnStdout: true, script: 'env')
                    }
                }
            }
        }
        stage('Unit Tests') {
            agent any
            steps {
                script {
                parallel(
                    Backend: {
                        dir('backend') {
                            try {
                            timeout(10) {
                                echo 'Installing NPM Dependencies...'
                                sh 'npm ci'

                                echo 'Linting and Testing Backend...'
                                sh'npm run lint:fix'
                                sh 'npm run test:unit'

                                echo 'Backend Lint Checks and Tests passed'
                            }
                            } catch (e) {
                            echo 'Backend Lint Checks and Tests failed'
                            throw e
                            }
                        }
                    },

                    Frontend: {
                        dir('frontend') {
                            try {
                            timeout(10) {
                            echo 'Installing NPM Dependencies...'
                            sh 'npm ci'

                            echo 'Linting and Testing Backend...'
                            sh' npm run lint:fix'
                            sh 'npm run test:unit'

                            echo 'Frontend Lint Checks and Tests passed'

                            }
                            } catch (e) {
                            echo 'Frontend Lint Checks and Tests failed'
                            throw e
                            }
                        }
                    }
                )
                }
            }
            post {
                success {
                    stash name: BE_COV_STASH, includes: 'backend/coverage/**'
                    stash name: FE_COV_STASH, includes: 'frontend/coverage/**'

                    echo 'All Lint Checks and Tests passed'
                }
                failure {
                    echo 'Some Lint Checks and Tests failed'
                }
            }
        }
        /*stage('SonarQube Analysis'){
            agent any

            environment {
                scannerHome = tool 'SonarQubeScanner'
            }

            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(TOOLS) {
                            if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                                echo "DEBUG - Using project: ${openshift.project()}"
                            }

                            unstash BE_COV_STASH
                            unstash FE_COV_STASH
                            echo 'Performing SonarQube static code analysis...'
                            withSonarQubeEnv('sonarqube') {
                                sh "${scannerHome}/bin/sonar-scanner"
                            }
                        }

                    }
                }
            }
        }*/
        stage('Build'){
            agent any
            steps{
                script {
                    openshift.withCluster(){
                        openshift.withProject(TOOLS){
                            parallel(
                                Backend: {
                                    try{
                                        echo "Building frontend..."
                                        def bcBackend = openshift.process('-f', 'tools/openshift/backend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")
                                        openshift.apply(bcBackend).narrow('bc').startBuild('-w').logs('-f')

                                        openshift.tag("${REPO_NAME}-backend:latest", "${REPO_NAME}-backend:${JOB_NAME}")
                                    } catch(e) {
                                        echo "Backend build failed"
                                        throw e
                                    }
                                },
                                Frontend: {
                                    try {
                                        def bcFrontend = openshift.process('-f', 'tools/openshift/frontend.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}")

                                        openshift.apply(bcFrontend).narrow('bc').startBuild('-w').logs('-f')
                                        openshift.tag("${REPO_NAME}-frontend:latest", "${REPO_NAME}-frontend:${JOB_NAME}")

                                        def bcFrontendStatic = openshift.process('-f', 'tools/openshift/frontend-static.bc.yaml', "REPO_NAME=${REPO_NAME}", "JOB_NAME=${JOB_NAME}", "NAMESPACE=${TOOLS}")
                                        openshift.apply(bcFrontendStatic).narrow('bc').startBuild('-w').logs('-f')
                                        openshift.tag("${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:${JOB_NAME}")
                                    } catch(e) {
                                        echo "Frontend build failed"
                                        throw e
                                    }
                                })
                        }
                    }
                }
            }
            post {
                success {
                    echo 'Cleanup BuildConfigs...'
                    script {
                        openshift.withCluster() {
                        openshift.withProject(TOOLS) {
                            if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                                echo "DEBUG - Using project: ${openshift.project()}"
                            } else {
                                def bcBackend = openshift.selector('bc', "${REPO_NAME}-backend-${JOB_NAME}")
                                def bcFrontend = openshift.selector('bc', "${REPO_NAME}-frontend-${JOB_NAME}")
                                def bcFrontendStatic = openshift.selector('bc', "${REPO_NAME}-frontend-static-${JOB_NAME}")

                                if(bcBackend.exists()){
                                    echo "Removing BuildConfig ${REPO_NAME}-backend-${JOB_NAME}..."
                                    bcBackend.delete()
                                }
                                if(bcFrontend.exists()) {
                                    echo "Removing BuildConfig ${REPO_NAME}-frontend-${JOB_NAME}..."
                                    bcFrontend.delete()
                                }
                                if(bcFrontendStatic.exists()) {
                                    echo "Removing BuildConfig ${REPO_NAME}-frontend-static-${JOB_NAME}..."
                                    bcFrontendStatic.delete()
                                }
                            }
                            }
                        }
                    }
                }
                failure {
                    echo 'Build stage failed'
                }
            }
        }
        stage('Deploy to Dev'){
            agent any
            steps{
                deployStage('Dev', DEV, DEV_HOST_ROUTE);
            } 
            post{
                success{
                    echo 'Deployment to Dev was successful'
                }
                failure{
                    echo 'Deployment to Dev failed'
                }
            }
        }
        /*stage('e2e tests'){
            agent any
            steps{
                script{
                    openshift.withCluster(){
                        openshift.withProject(){
                            def e2e = openshift.selector("bc", "student-profile-e2e-master-pipeline")
                            e2e.startBuild('-w')
                        }
                    }
                }
            }
        }*/
    }
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv) {
  if (!stageEnv.equalsIgnoreCase('Dev')) {
    input("Deploy to ${projectEnv}?")
  }

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
          // if no response after 10 minutes, do not deploy to selected env
          timeout(10) {
               echo "DEBUG - Using project: ${openshift.project()}"
          }
      }
      echo "Tagging Image ${REPO_NAME}-backend:latest..."
      openshift.tag("${TOOLS}/${REPO_NAME}-backend:latest", "${REPO_NAME}-backend:latest")

      echo "Tagging Image ${REPO_NAME}-frontend-static:latest..."
      openshift.tag("${TOOLS}/${REPO_NAME}-frontend-static:latest", "${REPO_NAME}-frontend-static:latest")
      echo "Processing DeploymentConfig ${REPO_NAME}-backend..."
      def dcBackendTemplate = openshift.process('-f',
        'tools/openshift/backend.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}"
      )
        
      def dcBackend = openshift.apply(dcBackendTemplate).narrow('dc')

      echo "Processing DeploymentConfig ${REPO_NAME}-frontend-static..."
      def dcFrontendStaticTemplate = openshift.process('-f',
        'tools/openshift/frontend-static.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}"
      )

      echo "Applying Deployment ${REPO_NAME}-frontend-static..."
      def dcFrontendStatic = openshift.apply(dcFrontendStaticTemplate).narrow('dc')

      // Wait for deployments to roll out
      timeout(10) {
        parallel(
            Backend: {
                dcBackend.rollout().status('--watch=true')
            },
            Frontend: {
                dcFrontendStatic.rollout().status('--watch=true')
            }
        )
      }
    }
  }
}
