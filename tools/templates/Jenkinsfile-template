pipeline{
    agent any

    environment{
        //change to true if you want verbose output
        DEBUG_OUTPUT = 'false'

        //prepend your namespace to each environment (eg. c2mvws-tools)
        TOOLS = '-tools'
        DEV = '-dev'
        TEST = '-test'
        PROD = '-prod'

        REPO_NAME = ''

        //Usually just bcgov, but change to yourself if using forked repo
        OWNER = 'bcgov'

        // unique identifier for specific deployment and build
        JOB_NAME = ''

        //name of the service
        SERVICE_NAME = ''
        
        //name of the application group
        APP_NAME = ''

        //leave this as pathfinder.gov.bc.ca unless you have set up a different domain in openshift
        APP_DOMAIN = 'pathfinder.gov.bc.ca'

        //the path from your repo root to your build and deploy configs (eg. /tools/openshift/bc.yaml)
        BUILD_CONFIG = ''
        DEPLOYMENT_CONFIG = ''

        SOURCE_REPO_REF = 'master'
        SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

        // anything appended to base url (eg. /api)
        HOST_PATH = '/'

        TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
        DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
        TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
        PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"

        // location of directory which build file is located (eg. pom, package.json, etc)
        BUILD_CONTEXT_DIR = '/'

        //location of Jenkinsfile to build from (JENKINSFILE STRATEGY ONLY)
        JENKINSFILE_PATH = '/'

        //source image to use for build (SOURCE STRATEGY ONLY) (eg. node:lts, maven:3.6.2)
        SOURCE_IMAGE = ''

        // unique tag for specific deployment
        TAG='${SOURCE_REPO_REF}'

        //port at which deployed app is located
        CONTAINER_PORT=''
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                        // Force OpenShift Plugin directives to be verbose
                        openshift.logLevel(1)

                        // Print all environment variables
                        echo 'DEBUG - All pipeline environment variables:'
                        echo sh(returnStdout: true, script: 'env')
                    }
                }
            }
        }
        stage('Build'){
            steps{
                script {
                    openshift.withCluster(){
                        openshift.withProject(TOOLS){
                            try{
                                echo "Building frontend..."

                                // depending on which build strategy you are using, uncomment one of the following build configs:

                                // Docker build strategy
                                //def buildConfig = openshift.process('-f', '${BUILD_CONFIG}', "SERVICE_NAME=${SERVICE_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}", "CONTEXT_DIR=${BUILD_CONTEXT_DIR}", "GIT_REF=${SOURCE_REPO_REF}")
                                
                                //Jenkins build strategy
                                //def buildConfig = openshift.process('-f', '${BUILD_CONFIG}', "SERVICE_NAME=${SERVICE_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}", "CONTEXT_DIR=${BUILD_CONTEXT_DIR}", "GIT_REF=${SOURCE_REPO_REF}", "JENKINSFILE_PATH=${JENKINSFILE_PATH}")

                                //Source build strategy (s2i)
                                //def buildConfig = openshift.process('-f', '${BUILD_CONFIG}', "SERVICE_NAME=${SERVICE_NAME}", "JOB_NAME=${JOB_NAME}", "SOURCE_REPO_URL=${SOURCE_REPO_URL}", "SOURCE_REPO_REF=${SOURCE_REPO_REF}", "CONTEXT_DIR=${BUILD_CONTEXT_DIR}", "GIT_REF=${SOURCE_REPO_REF}", "SOURCE_TAG=${SOURCE_IMAGE}")
                                
                                openshift.apply(buildConfig).narrow('bc').startBuild('-w').logs('-f')

                                openshift.tag("${SERVICE_NAME}-${JOB_NAME}:latest", "${SERVICE_NAME}-${JOB_NAME}:${TAG}")
                            } catch(e) {
                                echo "Backend build failed"
                                throw e
                            }
                        }
                    }
                }
            }
            post {
                success {
                    echo 'Cleanup BuildConfigs...'
                    script {
                        openshift.withCluster() {
                        openshift.withProject(TOOLS) {
                            if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                                echo "DEBUG - Using project: ${openshift.project()}"
                            } else {
                                def bcComplete = openshift.selector('bc', "${SERVICE_NAME}-${JOB_NAME}")

                                if(bcComplete.exists()){
                                    echo "Removing BuildConfig ${SERVICE_NAME}-${JOB_NAME}..."
                                    bcComplete.delete()
                                }
                            }
                            }
                        }
                    }
                }
                failure {
                    echo 'Build stage failed'
                }
            }
        }
        stage('Deploy to Dev'){
            steps{
                deployStage('Dev', DEV, DEV_HOST_ROUTE)
            }
            post{
                success{
                    echo 'Deployment to Dev was successful'
                }
                failure{
                    echo 'Deployment to Dev failed'
                }
            }
        }
    }
}

//paramaterized deployment 
def deployStage(String stageEnv, String projectEnv, String hostRouteEnv) {

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
        echo "DEBUG - Using project: ${openshift.project()}"
      }
      echo "Tagging Image ${SERVICE_NAME}-${JOB_NAME}:${TAG}..."
      openshift.tag("${TOOLS}/${SERVICE_NAME}-${JOB_NAME}:${TAG}", "${SERVICE_NAME}-${JOB_NAME}:${TAG}")

      echo "Processing DeploymentConfig ${REPO_NAME}..."
      def dcTemplate = openshift.process('-f',
        '${DEPLOYMENT_CONFIG}',
        "SERVICE_NAME=${SERVICE_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "CONTAINER_PORT=${CONTAINER_PORT}",
        "TAG=${TAG}",
        "HOST_PATH=${HOST_PATH}"
        "HOST_ROUTE=${hostRouteEnv}"
      )
        
      def deploymentConfig = openshift.apply(dcTemplate).narrow('dc')
      // Wait for deployments to roll out
      timeout(10) {
        deploymentConfig.rollout().status('--watch=true')
      }
    }
  }
}
