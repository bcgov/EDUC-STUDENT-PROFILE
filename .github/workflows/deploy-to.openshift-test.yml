name: Build & Deploy to TEST

env:
  # 🖊️ EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE_TEST: ${{ secrets.PEN_NAMESPACE_NO_ENV }}-test

  SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}
  CA_CERT: ${{ secrets.CA_CERT }}
  CERTIFICATE: ${{ secrets.CERT }}
  PRIVATE_KEY: ${{ secrets.PRIV_KEY }}

  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  IMAGE_NAME: student-profile-master

  APP_NAME: "student-profile"
  REPO_NAME: "educ-student-profile"
  BRANCH: "master"
  APP_NAME_BACKEND: "student-profile-backend-master"
  APP_NAME_FRONTEND: "student-profile-frontend-master"
  NAMESPACE: ${{ secrets.PEN_NAMESPACE_NO_ENV }}
  COMMON_NAMESPACE: ${{ secrets.COMMON_NAMESPACE_NO_ENV }}
  TAG: ${{ github.event.inputs.tag }}
  MIN_REPLICAS_TEST: "2"
  MAX_REPLICAS_TEST: "3"
  MIN_CPU_BACKEND: "10m"
  MAX_CPU_BACKEND: "100m"
  MIN_MEM_BACKEND: "125Mi"
  MAX_MEM_BACKEND: "250Mi"
  MIN_CPU_FRONTEND: "10m"
  MAX_CPU_FRONTEND: "50m"
  MIN_MEM_FRONTEND: "50Mi"
  MAX_MEM_FRONTEND: "100Mi"
  # SITE_URL should have no scheme or port. It will be prepended with https://
  HOST_ROUTE: ${{ secrets.SITE_URL }}

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Please input the tag, latest or release ex. 1.2.3'
        type: string
        required: true
        default: "latest"

jobs:
  build-and-deploy-test:
    name: Build and deploy to OpenShift TEST
    runs-on: ubuntu-22.04
    environment: test

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v6
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };
            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }
            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });
            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

        # https://github.com/redhat-actions/oc-login#readme
      - uses: actions/checkout@v3

      - name: Deploy
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.OPENSHIFT_NAMESPACE_TEST }}
          # Cancel any rollouts in progress
          oc rollout cancel deployment/${{ env.APP_NAME_BACKEND }} 2> /dev/null \
            || true && echo "No backend rollout in progress"
          oc rollout cancel deployment/${{ env.APP_NAME_FRONTEND }} 2> /dev/null \
            || true && echo "No frontend rollout in progress"

          # Create the image stream if it doesn't exist
          oc create imagestream ${{ env.REPO_NAME }}-backend 2> /dev/null || true && echo "Backend image stream in place"
          oc create imagestream ${{ env.REPO_NAME }}-frontend-static 2> /dev/null || true && echo "Frontend image stream in place"

          oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-backend:${{ env.TAG }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-backend:${{ env.TAG }}
          oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-frontend-static:${{ env.TAG }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-frontend-static:${{ env.TAG }}

          # Process and apply backend deployment template
          oc process -f tools/openshift/backend.deployment.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p BRANCH=${{ env.BRANCH }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE_TEST }} -p TAG=${{ env.TAG }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS_TEST }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS_TEST }} -p MIN_CPU=${{ env.MIN_CPU_BACKEND }} -p MAX_CPU=${{ env.MAX_CPU_BACKEND }} -p MIN_MEM=${{ env.MIN_MEM_BACKEND }} -p MAX_MEM=${{ env.MAX_MEM_BACKEND }} -p HOST_ROUTE=${{ env.HOST_ROUTE }}\
          | oc apply -f -

          # Process and apply frontend deployment template
          oc process -f tools/openshift/frontend-static.deployment.yaml -p APP_NAME=${{ env.APP_NAME }} -p REPO_NAME=${{ env.REPO_NAME }} -p BRANCH=${{ env.BRANCH }} -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE_TEST }} -p TAG=${{ env.TAG }} -p MIN_REPLICAS=${{ env.MIN_REPLICAS_TEST }} -p MAX_REPLICAS=${{ env.MAX_REPLICAS_TEST }} -p MIN_CPU=${{ env.MIN_CPU_FRONTEND }} -p MAX_CPU=${{ env.MAX_CPU_FRONTEND }} -p MIN_MEM=${{ env.MIN_MEM_FRONTEND }} -p MAX_MEM=${{ env.MAX_MEM_FRONTEND }} -p HOST_ROUTE=${{ env.HOST_ROUTE }} -p CA_CERT="${{ env.CA_CERT }}" -p CERTIFICATE="${{ env.CERTIFICATE }}" -p PRIVATE_KEY="${{ env.PRIVATE_KEY }}"\
            | oc apply -f -

          curl -s https://raw.githubusercontent.com/bcgov/${{ env.REPO_NAME }}/${{ env.BRANCH }}/tools/config/update-configmap.sh \
            | bash /dev/stdin \
            test \
            ${{ env.APP_NAME }} \
            ${{ env.NAMESPACE }} \
            ${{ env.COMMON_NAMESPACE }} \
            ${{ env.SPLUNK_TOKEN }} \
            ${{ env.BRANCH }}


          # Start rollout (if necessary) and follow it
          oc rollout latest deployment/${{ env.APP_NAME_BACKEND }} 2> /dev/null \
            || true && echo "Rollout in progress"
          oc logs -f deployment/${{ env.APP_NAME_BACKEND }}

          oc rollout restart deployment/${{ env.APP_NAME_FRONTEND }} 2> /dev/null \
          || true && echo "Rollout in progress"

          # Get status, returns 0 if rollout is successful
          oc rollout status deployment/${{ env.APP_NAME_BACKEND }}
          oc rollout status deployment/${{ env.APP_NAME_FRONTEND }}
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://${{ env.HOST_ROUTE }}'
